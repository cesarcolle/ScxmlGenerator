
from sharedStruture import sendQueue

import abc

class SM:
    __metaclass__ = abc.ABCMeta

    def start(self):
        raise NotImplementedError()

    def onentry(self):
        raise NotImplementedError()

    def transition(self, event):
        raise NotImplementedError()

    def send(self, event):
        sendQueue.put(event)

#for s in $statement

#if len($s["parent"]) > 0
from sharedStruture import RaiseQueue_$s["parent"][0]
#end if
class SM_$s["nom"] (SM):
    def __init__(self):
        self.onentryAction = lambda: None
        self.onentryActions = lambda: None
        self.transitions = $s["transition"]
        pass

    def start(self):
        self.onentry()

    def onentry(self):
        pass
        # execute code here

    def log(self):
        pass

    def onentryAction(self, f):
        self.onentryAction = f

    def onexitAction(self, f):
        self.onexitAction = f

    def onentry(self, params=None):
        pass
        self.onentryAction(params)

    def onexit(self, params=None):

        self.onexitAction(params)
        if not sendQueue.empty() :
            return self.transition(sendQueue.get())
        #if len($s["parent"]) > 0
        if not RaiseQueue_${$s["parent"][0]}.empty() :
            return self.transition(RaiseQueue_${$s["parent"][0]}.get())
        #end if

    #if len($s["parent"]) > 0
    def raiseEvent(self, event):
        RaiseQueue_${$s["parent"][0]}.put(event)
    #end if

    def jump(self, event):
        pass

    def transition(self, event):
        pass
        self.onexit()
        #if len(s["transition"]) > 0
        if event in self.transitions:
            return statesItem[self.transitions[event]]
        else:
            pass
        #if  len($s["parent"]) > 0
            SM_${$s["parent"][0]}.transition(event)
        #end if
        #end if
#end for